func nas(a string) []int:
0:
	t0 = len(a)
	t1 = t0 / 2:int
	t2 = len(a)
	t3 = t2 / 2:int
	t4 = t1 + t3
	t5 = make []int 0:int t4
	t6 = len(a)
	t7 = t6 - 1:int
	jump 3
1:
	t8 = a[t14]
	t9 = t8 - 48:byte
	t10 = convert int <- byte (t9)
	t11 = t10 >= 0:int
	if t11 goto 6 else 5
2:
	return t12
3:
	t12 = phi [0: t5, 5: t22] #msg
	t13 = phi [0: 0:int, 5: t23] #z
	t14 = phi [0: t7, 5: t25] #i
	t15 = t14 >= 0:int
	if t15 goto 1 else 2
4:
	t16 = t13 + t10
	t17 = guru(t10, 0:int)
	t18 = new [1]int (varargs)
	t19 = &t18[0:int]
	*t19 = t17
	t20 = slice t18[:]
	t21 = append(t12, t20...)
	jump 5
5:
	t22 = phi [1: t12, 6: t12, 4: t21] #msg
	t23 = phi [1: t13, 6: t13, 4: t16] #z
	t24 = t23 == 1024:int
	t25 = t14 - 1:int
	jump 3
6:
	t26 = t10 < 10:int
	if t26 goto 4 else 5

