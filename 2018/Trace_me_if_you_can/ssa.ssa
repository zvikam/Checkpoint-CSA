package main.go:
  func  andre      func(a []int, b []int) []int
  func  dilla      func(a []int, b []int)
  func  doom       func(aa []int, bb []int) int
  func  guru       func(a int, b int) int
  func  gza        func(a []int, b []int) []int
  func  init       func()
  var   init$guard bool
  func  kendrick   func(a []int) int
  func  main       func()
  func  nas        func(a string) []int
  func  rakim      func(a []int, b []int) []int

# Name: main.go.init
# Package: main.go
# Synthetic: package initializer
func init():
0:                                                                entry P:0 S:2
	t0 = *init$guard                                                   bool
	if t0 goto 2 else 1
1:                                                           init.start P:1 S:1
	*init$guard = true:bool
	t1 = bufio.init()                                                    ()
	t2 = fmt.init()                                                      ()
	t3 = math/rand.init()                                                ()
	t4 = os.init()                                                       ()
	t5 = strconv.init()                                                  ()
	t6 = strings.init()                                                  ()
	jump 2
2:                                                            init.done P:2 S:0
	return

# Name: main.go.dilla
# Package: main.go
# Location: main.go:12:6
func dilla(a []int, b []int):
0:                                                                entry P:0 S:0
	t0 = &a[0:int]                                                     *int
	t1 = *t0                                                            int
	t2 = convert int64 <- int (t1)                                    int64
	t3 = math/rand.Seed(t2)                                              ()
	return

# Name: main.go.andre
# Package: main.go
# Location: main.go:16:6
func andre(a []int, b []int) []int:
0:                                                                entry P:0 S:2
	t0 = len(a)                                                         int
	t1 = len(b)                                                         int
	t2 = t0 > t1                                                       bool
	if t2 goto 1 else 3
1:                                                              if.then P:1 S:1
	t3 = len(b)                                                         int
	t4 = make []int t3 t3                                             []int
	jump 2
2:                                                              if.done P:2 S:1
	t5 = phi [1: t4, 3: t13] #sorry                                   []int
	t6 = dilla(a, t5)                                                    ()
	t7 = len(a)                                                         int
	t8 = len(b)                                                         int
	t9 = t7 + t8                                                        int
	t10 = make []int t9 t9                                            []int
	t11 = len(t10)                                                      int
	jump 4
3:                                                              if.else P:1 S:1
	t12 = len(a)                                                        int
	t13 = make []int t12 t12                                          []int
	jump 2
4:                                                      rangeindex.loop P:2 S:2
	t14 = phi [2: -1:int, 5: t15]                                       int
	t15 = t14 + 1:int                                                   int
	t16 = t15 < t11                                                    bool
	if t16 goto 5 else 6
5:                                                      rangeindex.body P:1 S:1
	t17 = &t10[t15]                                                    *int
	*t17 = 0:int
	jump 4
6:                                                      rangeindex.done P:1 S:1
	jump 9
7:                                                             for.body P:1 S:1
	jump 12
8:                                                             for.done P:1 S:1
	t18 = len(t10)                                                      int
	t19 = t18 - 1:int                                                   int
	t20 = slice t10[:t19]                                             []int
	jump 15
9:                                                             for.loop P:2 S:2
	t21 = phi [6: 0:int, 11: t32] #i                                    int
	t22 = len(b)                                                        int
	t23 = t21 < t22                                                    bool
	if t23 goto 7 else 8
10:                                                            for.body P:1 S:1
	t24 = t21 + t33                                                     int
	t25 = &t10[t24]                                                    *int
	t26 = &a[t33]                                                      *int
	t27 = *t26                                                          int
	t28 = &b[t21]                                                      *int
	t29 = *t28                                                          int
	t30 = t27 * t29                                                     int
	*t25 = t30
	t31 = t33 + 1:int                                                   int
	jump 12
11:                                                            for.done P:1 S:1
	t32 = t21 + 1:int                                                   int
	jump 9
12:                                                            for.loop P:2 S:2
	t33 = phi [7: 0:int, 10: t31] #j                                    int
	t34 = len(a)                                                        int
	t35 = t33 < t34                                                    bool
	if t35 goto 10 else 11
13:                                                            for.body P:1 S:2
	t36 = &t10[t39]                                                    *int
	t37 = *t36                                                          int
	t38 = t37 >= 10:int                                                bool
	if t38 goto 16 else 17
14:                                                            for.done P:1 S:0
	return t10
15:                                                            for.loop P:2 S:2
	t39 = phi [8: 0:int, 17: t53] #x                                    int
	t40 = len(t20)                                                      int
	t41 = t39 < t40                                                    bool
	if t41 goto 13 else 14
16:                                                             if.then P:1 S:1
	t42 = t39 + 1:int                                                   int
	t43 = &t10[t42]                                                    *int
	t44 = &t10[t39]                                                    *int
	t45 = *t44                                                          int
	t46 = t45 / 10:int                                                  int
	t47 = *t43                                                          int
	t48 = t47 + t46                                                     int
	*t43 = t48
	t49 = &t10[t39]                                                    *int
	t50 = &t10[t39]                                                    *int
	t51 = *t50                                                          int
	t52 = t51 % 10:int                                                  int
	*t49 = t52
	jump 17
17:                                                             if.done P:2 S:1
	t53 = t39 + 1:int                                                   int
	jump 15

# Name: main.go.doom
# Package: main.go
# Location: main.go:44:6
func doom(aa []int, bb []int) int:
0:                                                                entry P:0 S:1
	t0 = len(aa)                                                        int
	t1 = t0 / 2:int                                                     int
	jump 3
1:                                                             for.body P:1 S:2
	t2 = &aa[t7]                                                       *int
	t3 = *t2                                                            int
	t4 = t3 == 0:int                                                   bool
	if t4 goto 4 else 5
2:                                                             for.done P:1 S:1
	t5 = len(aa)                                                        int
	t6 = t5 - 1:int                                                     int
	jump 8
3:                                                             for.loop P:2 S:2
	t7 = phi [0: t1, 5: t10] #ii                                        int
	t8 = t7 >= 0:int                                                   bool
	if t8 goto 1 else 2
4:                                                              if.then P:1 S:1
	t9 = &aa[t7]                                                       *int
	*t9 = 0:int
	jump 5
5:                                                              if.done P:2 S:1
	t10 = t7 - 1:int                                                    int
	jump 3
6:                                                             for.body P:1 S:2
	t11 = &aa[t17]                                                     *int
	t12 = *t11                                                          int
	t13 = t12 > 0:int                                                  bool
	if t13 goto 9 else 10
7:                                                             for.done P:2 S:1
	t14 = phi [8: nil:[]int, 9: t20] #m                               []int
	t15 = len(bb)                                                       int
	t16 = t15 - 1:int                                                   int
	jump 13
8:                                                             for.loop P:2 S:2
	t17 = phi [2: t6, 10: t21] #i                                       int
	t18 = t17 >= 0:int                                                 bool
	if t18 goto 6 else 7
9:                                                              if.then P:1 S:1
	t19 = t17 + 1:int                                                   int
	t20 = slice aa[:t19]                                              []int
	jump 7
10:                                                             if.done P:1 S:1
	t21 = t17 - 1:int                                                   int
	jump 8
11:                                                            for.body P:1 S:2
	t22 = &bb[t29]                                                     *int
	t23 = *t22                                                          int
	t24 = t23 > 0:int                                                  bool
	if t24 goto 14 else 15
12:                                                            for.done P:2 S:2
	t25 = phi [13: nil:[]int, 14: t32] #f                             []int
	t26 = len(t14)                                                      int
	t27 = len(t25)                                                      int
	t28 = t26 > t27                                                    bool
	if t28 goto 16 else 17
13:                                                            for.loop P:2 S:2
	t29 = phi [7: t16, 15: t33] #i                                      int
	t30 = t29 >= 0:int                                                 bool
	if t30 goto 11 else 12
14:                                                             if.then P:1 S:1
	t31 = t29 + 1:int                                                   int
	t32 = slice bb[:t31]                                              []int
	jump 12
15:                                                             if.done P:1 S:1
	t33 = t29 - 1:int                                                   int
	jump 13
16:                                                             if.then P:1 S:0
	return 1:int
17:                                                             if.done P:1 S:2
	t34 = len(t14)                                                      int
	t35 = len(t25)                                                      int
	t36 = t34 < t35                                                    bool
	if t36 goto 18 else 19
18:                                                             if.then P:1 S:0
	return -1:int
19:                                                             if.done P:1 S:1
	t37 = len(t14)                                                      int
	t38 = t37 - 1:int                                                   int
	jump 22
20:                                                            for.body P:1 S:2
	t39 = &t14[t44]                                                    *int
	t40 = *t39                                                          int
	t41 = &t25[t44]                                                    *int
	t42 = *t41                                                          int
	t43 = t40 > t42                                                    bool
	if t43 goto 23 else 24
21:                                                            for.done P:1 S:0
	return -2:int
22:                                                            for.loop P:2 S:2
	t44 = phi [19: t38, 26: t51] #i                                     int
	t45 = t44 >= 0:int                                                 bool
	if t45 goto 20 else 21
23:                                                             if.then P:1 S:0
	return 1:int
24:                                                             if.done P:1 S:2
	t46 = &t14[t44]                                                    *int
	t47 = *t46                                                          int
	t48 = &t25[t44]                                                    *int
	t49 = *t48                                                          int
	t50 = t47 < t49                                                    bool
	if t50 goto 25 else 26
25:                                                             if.then P:1 S:0
	return -1:int
26:                                                             if.done P:1 S:1
	t51 = t44 - 1:int                                                   int
	jump 22

# Name: main.go.rakim
# Package: main.go
# Location: main.go:94:6
func rakim(a []int, b []int) []int:
0:                                                                entry P:0 S:2
	t0 = doom(a, b)                                                     int
	t1 = t0 == -1:int                                                  bool
	if t1 goto 1 else 2
1:                                                              if.then P:1 S:0
	return nil:[]int
2:                                                              if.done P:1 S:1
	t2 = len(a)                                                         int
	t3 = make []int t2 t2                                             []int
	jump 5
3:                                                             for.body P:1 S:2
	t4 = len(a)                                                         int
	t5 = t6 < t4                                                       bool
	if t5 goto 6 else 8
4:                                                             for.done P:1 S:0
	return t3
5:                                                             for.loop P:2 S:2
	t6 = phi [2: 0:int, 13: t20] #i                                     int
	t7 = len(a)                                                         int
	t8 = t6 < t7                                                       bool
	if t8 goto 3 else 4
6:                                                              if.then P:1 S:1
	t9 = &a[t6]                                                        *int
	t10 = *t9                                                           int
	jump 7
7:                                                              if.done P:2 S:2
	t11 = phi [6: t10, 8: 0:int] #a_i                                   int
	t12 = len(b)                                                        int
	t13 = t6 < t12                                                     bool
	if t13 goto 9 else 11
8:                                                              if.else P:1 S:1
	jump 7
9:                                                              if.then P:1 S:1
	t14 = &b[t6]                                                       *int
	t15 = *t14                                                          int
	jump 10
10:                                                             if.done P:2 S:2
	t16 = phi [9: t15, 11: 0:int] #b_i                                  int
	t17 = t11 < t16                                                    bool
	if t17 goto 12 else 14
11:                                                             if.else P:1 S:1
	jump 10
12:                                                             if.then P:1 S:1
	t18 = &t3[t6]                                                      *int
	t19 = t16 - t11                                                     int
	*t18 = t19
	jump 13
13:                                                             if.done P:2 S:1
	t20 = t6 + 1:int                                                    int
	jump 5
14:                                                             if.else P:1 S:1
	t21 = &t3[t6]                                                      *int
	t22 = t11 - t16                                                     int
	*t21 = t22
	jump 13

# Name: main.go.kendrick
# Package: main.go
# Location: main.go:122:6
func kendrick(a []int) int:
0:                                                                entry P:0 S:1
	t0 = len(a)                                                         int
	jump 1
1:                                                      rangeindex.loop P:2 S:2
	t1 = phi [0: 0:int, 2: t7] #damn                                    int
	t2 = phi [0: -1:int, 2: t3]                                         int
	t3 = t2 + 1:int                                                     int
	t4 = t3 < t0                                                       bool
	if t4 goto 2 else 3
2:                                                      rangeindex.body P:1 S:1
	t5 = &a[t3]                                                        *int
	t6 = *t5                                                            int
	t7 = t1 + t6                                                        int
	jump 1
3:                                                      rangeindex.done P:1 S:0
	return t1

# Name: main.go.guru
# Package: main.go
# Location: main.go:131:6
func guru(a int, b int) int:
0:                                                                entry P:0 S:2
	t0 = a > b                                                         bool
	if t0 goto 1 else 2
1:                                                              if.then P:1 S:0
	return a
2:                                                              if.done P:1 S:0
	return b

# Name: main.go.nas
# Package: main.go
# Location: main.go:138:6
func nas(a string) []int:
0:                                                                entry P:0 S:1
	t0 = len(a)                                                         int
	t1 = t0 / 2:int                                                     int
	t2 = len(a)                                                         int
	t3 = t2 / 2:int                                                     int
	t4 = t1 + t3                                                        int
	t5 = make []int 0:int t4                                          []int
	t6 = len(a)                                                         int
	t7 = t6 - 1:int                                                     int
	jump 3
1:                                                             for.body P:1 S:2
	t8 = a[t14]                                                       uint8
	t9 = t8 - 48:byte                                                  byte
	t10 = convert int <- byte (t9)                                      int
	t11 = t10 >= 0:int                                                 bool
	if t11 goto 6 else 5
2:                                                             for.done P:1 S:0
	return t12
3:                                                             for.loop P:2 S:2
	t12 = phi [0: t5, 5: t22] #msg                                    []int
	t13 = phi [0: 0:int, 5: t23] #z                                     int
	t14 = phi [0: t7, 5: t25] #i                                        int
	t15 = t14 >= 0:int                                                 bool
	if t15 goto 1 else 2
4:                                                              if.then P:1 S:1
	t16 = t13 + t10                                                     int
	t17 = guru(t10, 0:int)                                              int
	t18 = new [1]int (varargs)                                      *[1]int
	t19 = &t18[0:int]                                                  *int
	*t19 = t17
	t20 = slice t18[:]                                                []int
	t21 = append(t12, t20...)                                         []int
	jump 5
5:                                                              if.done P:3 S:1
	t22 = phi [1: t12, 6: t12, 4: t21] #msg                           []int
	t23 = phi [1: t13, 6: t13, 4: t16] #z                               int
	t24 = t23 == 1024:int                                              bool
	t25 = t14 - 1:int                                                   int
	jump 3
6:                                                            cond.true P:1 S:2
	t26 = t10 < 10:int                                                 bool
	if t26 goto 4 else 5

# Name: main.go.gza
# Package: main.go
# Location: main.go:155:6
func gza(a []int, b []int) []int:
0:                                                                entry P:0 S:2
	t0 = len(a)                                                         int
	t1 = len(b)                                                         int
	t2 = guru(t0, t1)                                                   int
	t3 = t2 + 1:int                                                     int
	t4 = make []int t3 t3                                             []int
	t5 = new [1]int (slicelit)                                      *[1]int
	t6 = &t5[0:int]                                                    *int
	*t6 = 0:int
	t7 = slice t5[:]                                                  []int
	t8 = rakim(a, t7)                                                 []int
	t9 = doom(a, t8)                                                    int
	t10 = t9 != -2:int                                                 bool
	if t10 goto 1 else 2
1:                                                              if.then P:1 S:0
	t11 = new [1]int (slicelit)                                     *[1]int
	t12 = &t11[0:int]                                                  *int
	*t12 = 0:int
	t13 = slice t11[:]                                                []int
	return t13
2:                                                              if.done P:1 S:1
	t14 = len(t4)                                                       int
	jump 3
3:                                                      rangeindex.loop P:3 S:2
	t15 = phi [2: 0:int, 12: t31, 13: t31] #wu                          int
	t16 = phi [2: -1:int, 12: t17, 13: t17]                             int
	t17 = t16 + 1:int                                                   int
	t18 = t17 < t14                                                    bool
	if t18 goto 4 else 5
4:                                                      rangeindex.body P:1 S:2
	t19 = len(a)                                                        int
	t20 = t17 < t19                                                    bool
	if t20 goto 6 else 8
5:                                                      rangeindex.done P:1 S:0
	return t4
6:                                                              if.then P:1 S:1
	t21 = &a[t17]                                                      *int
	t22 = *t21                                                          int
	jump 7
7:                                                              if.done P:2 S:2
	t23 = phi [6: t22, 8: 0:int] #a_i                                   int
	t24 = len(b)                                                        int
	t25 = t17 < t24                                                    bool
	if t25 goto 9 else 11
8:                                                              if.else P:1 S:1
	jump 7
9:                                                              if.then P:1 S:1
	t26 = &b[t17]                                                      *int
	t27 = *t26                                                          int
	jump 10
10:                                                             if.done P:2 S:2
	t28 = phi [9: t27, 11: 0:int] #b_i                                  int
	t29 = t23 + t28                                                     int
	t30 = t29 + t15                                                     int
	t31 = t30 / 10:int                                                  int
	t32 = t30 > 10:int                                                 bool
	if t32 goto 12 else 13
11:                                                             if.else P:1 S:1
	jump 10
12:                                                             if.then P:1 S:1
	t33 = &t4[t17]                                                     *int
	t34 = t30 % 10:int                                                  int
	*t33 = t34
	jump 3
13:                                                             if.else P:1 S:1
	t35 = &t4[t17]                                                     *int
	*t35 = t30
	jump 3

# Name: main.go.main
# Package: main.go
# Location: main.go:186:6
func main():
0:                                                                entry P:0 S:1
	t0 = *os.Stdin                                                 *os.File
	t1 = make io.Reader <- *os.File (t0)                          io.Reader
	t2 = bufio.NewReader(t1)                                  *bufio.Reader
	t3 = new [1]interface{} (varargs)                       *[1]interface{}
	t4 = &t3[0:int]                                            *interface{}
	t5 = make interface{} <- string ("Please insert input:":string) interface{}
	*t4 = t5
	t6 = slice t3[:]                                          []interface{}
	t7 = fmt.Print(t6...)                                (n int, err error)
	t8 = (*bufio.Reader).ReadString(t2, 10:byte)            (string, error)
	t9 = extract t8 #0                                               string
	t10 = extract t8 #1                                               error
	t11 = strings.Fields(t9)                                       []string
	t12 = len(t11)                                                      int
	t13 = make []int t12 t12                                          []int
	jump 3
1:                                                             for.body P:1 S:1
	t14 = &t13[t50]                                                    *int
	t15 = &t11[t50]                                                 *string
	t16 = *t15                                                       string
	t17 = strconv.Atoi(t16)                                    (int, error)
	t18 = extract t17 #0                                                int
	*t14 = t18
	t19 = extract t17 #1                                              error
	t20 = t19 == nil:error                                             bool
	t21 = t50 + 1:int                                                   int
	jump 3
2:                                                             for.done P:1 S:2
	t22 = len(t13)                                                      int
	t23 = strconv.Itoa(t22)                                          string
	t24 = nas(t23)                                                    []int
	t25 = new [1]int (slicelit)                                     *[1]int
	t26 = &t25[0:int]                                                  *int
	t27 = guru(2:int, 1:int)                                            int
	*t26 = t27
	t28 = slice t25[:]                                                []int
	t29 = new [2]int (slicelit)                                     *[2]int
	t30 = &t29[0:int]                                                  *int
	*t30 = 0:int
	t31 = &t29[1:int]                                                  *int
	*t31 = 2:int
	t32 = slice t29[:]                                                []int
	t33 = new [2]int (slicelit)                                     *[2]int
	t34 = &t33[0:int]                                                  *int
	*t34 = 0:int
	t35 = &t33[1:int]                                                  *int
	*t35 = 2:int
	t36 = slice t33[:]                                                []int
	t37 = new [1]int (slicelit)                                     *[1]int
	t38 = &t37[0:int]                                                  *int
	*t38 = 1:int
	t39 = slice t37[:]                                                []int
	t40 = new [2]int (slicelit)                                     *[2]int
	t41 = &t40[0:int]                                                  *int
	*t41 = 0:int
	t42 = &t40[1:int]                                                  *int
	*t42 = 1:int
	t43 = slice t40[:]                                                []int
	t44 = andre(t39, t43)                                             []int
	t45 = gza(t36, t44)                                               []int
	t46 = gza(t32, t45)                                               []int
	t47 = andre(t28, t46)                                             []int
	t48 = doom(t24, t47)                                                int
	t49 = t48 != -2:int                                                bool
	if t49 goto 4 else 5
3:                                                             for.loop P:2 S:2
	t50 = phi [0: 0:int, 1: t21] #i                                     int
	t51 = len(t11)                                                      int
	t52 = t50 < t51                                                    bool
	if t52 goto 1 else 2
4:                                                              if.then P:1 S:1
	t53 = new [1]interface{} (varargs)                      *[1]interface{}
	t54 = &t53[0:int]                                          *interface{}
	t55 = make interface{} <- string ("fail1":string)           interface{}
	*t54 = t55
	t56 = slice t53[:]                                        []interface{}
	t57 = fmt.Println(t56...)                            (n int, err error)
	jump 5
5:                                                              if.done P:2 S:1
	t58 = phi [2: true:bool, 4: false:bool] #g_c                       bool
	t59 = len(t13)                                                      int
	jump 6
6:                                                      rangeindex.loop P:3 S:2
	t60 = phi [5: t58, 7: t60, 9: false:bool] #g_c                     bool
	t61 = phi [5: -1:int, 7: t62, 9: t62]                               int
	t62 = t61 + 1:int                                                   int
	t63 = t62 < t59                                                    bool
	if t63 goto 7 else 8
7:                                                      rangeindex.body P:1 S:2
	t64 = &t13[t62]                                                    *int
	t65 = *t64                                                          int
	t66 = t65 < 0:int                                                  bool
	if t66 goto 9 else 6
8:                                                      rangeindex.done P:1 S:1
	t67 = len(t11)                                                      int
	t68 = t67 / 2:int                                                   int
	t69 = make []int t68 t68                                          []int
	jump 12
9:                                                              if.then P:1 S:1
	t70 = new [1]interface{} (varargs)                      *[1]interface{}
	t71 = &t70[0:int]                                          *interface{}
	t72 = make interface{} <- string ("fail2":string)           interface{}
	*t71 = t72
	t73 = slice t70[:]                                        []interface{}
	t74 = fmt.Println(t73...)                            (n int, err error)
	jump 6
10:                                                            for.body P:1 S:1
	t75 = &t69[t85]                                                    *int
	t76 = t85 * 2:int                                                   int
	t77 = &t13[t76]                                                    *int
	t78 = *t77                                                          int
	t79 = t85 * 2:int                                                   int
	t80 = t79 + 1:int                                                   int
	t81 = &t13[t80]                                                    *int
	t82 = *t81                                                          int
	t83 = t78 - t82                                                     int
	*t75 = t83
	t84 = t85 + 1:int                                                   int
	jump 12
11:                                                            for.done P:1 S:1
	jump 15
12:                                                            for.loop P:2 S:2
	t85 = phi [8: 0:int, 10: t84] #i                                    int
	t86 = len(t69)                                                      int
	t87 = t85 < t86                                                    bool
	if t87 goto 10 else 11
13:                                                            for.body P:1 S:2
	t88 = t99 + 1:int                                                   int
	t89 = slice t69[:t88]                                             []int
	t90 = kendrick(t89)                                                 int
	t91 = strconv.Itoa(t90)                                          string
	t92 = nas(t91)                                                    []int
	t93 = new [1]int (slicelit)                                     *[1]int
	t94 = &t93[0:int]                                                  *int
	*t94 = 0:int
	t95 = slice t93[:]                                                []int
	t96 = doom(t92, t95)                                                int
	t97 = t96 == -1:int                                                bool
	if t97 goto 16 else 17
14:                                                            for.done P:1 S:1
	jump 20
15:                                                            for.loop P:2 S:2
	t98 = phi [11: t60, 17: t107] #g_c                                 bool
	t99 = phi [11: 0:int, 17: t108] #i                                  int
	t100 = len(t69)                                                     int
	t101 = t99 < t100                                                  bool
	if t101 goto 13 else 14
16:                                                             if.then P:1 S:1
	t102 = new [1]interface{} (varargs)                     *[1]interface{}
	t103 = &t102[0:int]                                        *interface{}
	t104 = make interface{} <- string ("fail3":string)          interface{}
	*t103 = t104
	t105 = slice t102[:]                                      []interface{}
	t106 = fmt.Println(t105...)                          (n int, err error)
	jump 17
17:                                                             if.done P:2 S:1
	t107 = phi [13: t98, 16: false:bool] #g_c                          bool
	t108 = t99 + 1:int                                                  int
	jump 15
18:                                                            for.body P:1 S:1
	t109 = &t13[t120]                                                  *int
	t110 = *t109                                                        int
	t111 = t119 + t110                                                  int
	t112 = t120 + 1:int                                                 int
	t113 = &t13[t112]                                                  *int
	t114 = *t113                                                        int
	t115 = t118 + t114                                                  int
	t116 = t120 + 2:int                                                 int
	jump 20
19:                                                            for.done P:1 S:2
	t117 = t119 != t118                                                bool
	if t117 goto 21 else 22
20:                                                            for.loop P:2 S:2
	t118 = phi [14: 0:int, 18: t115] #o_su                              int
	t119 = phi [14: 0:int, 18: t111] #e_su                              int
	t120 = phi [14: 0:int, 18: t116] #i                                 int
	t121 = len(t13)                                                     int
	t122 = t120 < t121                                                 bool
	if t122 goto 18 else 19
21:                                                             if.then P:1 S:1
	t123 = new [1]interface{} (varargs)                     *[1]interface{}
	t124 = &t123[0:int]                                        *interface{}
	t125 = make interface{} <- string ("fail4":string)          interface{}
	*t124 = t125
	t126 = slice t123[:]                                      []interface{}
	t127 = fmt.Println(t126...)                          (n int, err error)
	jump 22
22:                                                             if.done P:2 S:1
	t128 = phi [19: t98, 21: false:bool] #g_c                          bool
	t129 = len(t13)                                                     int
	jump 23
23:                                                     rangeindex.loop P:2 S:2
	t130 = phi [22: -1:int, 26: t131]                                   int
	t131 = t130 + 1:int                                                 int
	t132 = t131 < t129                                                 bool
	if t132 goto 24 else 25
24:                                                     rangeindex.body P:1 S:1
	t133 = len(nil:[]int)                                               int
	jump 26
25:                                                     rangeindex.done P:1 S:2
	t134 = &t13[49:int]                                                *int
	t135 = *t134                                                        int
	t136 = t135 != 100:int                                             bool
	if t136 goto 28 else 29
26:                                                     rangeindex.loop P:2 S:2
	t137 = phi [24: -1:int, 27: t138]                                   int
	t138 = t137 + 1:int                                                 int
	t139 = t138 < t133                                                 bool
	if t139 goto 27 else 23
27:                                                     rangeindex.body P:1 S:1
	t140 = t131 + t138                                                  int
	t141 = new [1]interface{} (varargs)                     *[1]interface{}
	t142 = &t141[0:int]                                        *interface{}
	t143 = make interface{} <- int (t140)                       interface{}
	*t142 = t143
	t144 = slice t141[:]                                      []interface{}
	t145 = fmt.Println(t144...)                          (n int, err error)
	jump 26
28:                                                             if.then P:1 S:1
	t146 = new [1]interface{} (varargs)                     *[1]interface{}
	t147 = &t146[0:int]                                        *interface{}
	t148 = make interface{} <- string ("fail5":string)          interface{}
	*t147 = t148
	t149 = slice t146[:]                                      []interface{}
	t150 = fmt.Println(t149...)                          (n int, err error)
	jump 29
29:                                                             if.done P:2 S:2
	t151 = phi [25: t128, 28: false:bool] #g_c                         bool
	t152 = &t13[6:int]                                                 *int
	t153 = *t152                                                        int
	t154 = &t13[7:int]                                                 *int
	t155 = *t154                                                        int
	t156 = t153 - t155                                                  int
	t157 = &t13[10:int]                                                *int
	t158 = *t157                                                        int
	t159 = t156 != t158                                                bool
	if t159 goto 30 else 31
30:                                                             if.then P:1 S:1
	t160 = new [1]interface{} (varargs)                     *[1]interface{}
	t161 = &t160[0:int]                                        *interface{}
	t162 = make interface{} <- string ("fail6":string)          interface{}
	*t161 = t162
	t163 = slice t160[:]                                      []interface{}
	t164 = fmt.Println(t163...)                          (n int, err error)
	jump 31
31:                                                             if.done P:2 S:2
	t165 = phi [29: t151, 30: false:bool] #g_c                         bool
	if t165 goto 32 else 34
32:                                                             if.then P:1 S:1
	t166 = new [1]interface{} (varargs)                     *[1]interface{}
	t167 = &t166[0:int]                                        *interface{}
	t168 = make interface{} <- string ("WIN":string)            interface{}
	*t167 = t168
	t169 = slice t166[:]                                      []interface{}
	t170 = fmt.Println(t169...)                          (n int, err error)
	jump 33
33:                                                             if.done P:2 S:0
	return
34:                                                             if.else P:1 S:1
	t171 = new [1]interface{} (varargs)                     *[1]interface{}
	t172 = &t171[0:int]                                        *interface{}
	t173 = make interface{} <- string ("No flag for you":string) interface{}
	*t172 = t173
	t174 = slice t171[:]                                      []interface{}
	t175 = fmt.Println(t174...)                          (n int, err error)
	jump 33

